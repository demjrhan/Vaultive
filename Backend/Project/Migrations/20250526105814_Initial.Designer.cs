// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Context;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(MasterContext))]
    [Migration("20250526105814_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("MediaContentStreamingService", b =>
                {
                    b.Property<int>("MediaContentsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StreamingServicesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaContentsId", "StreamingServicesId");

                    b.HasIndex("StreamingServicesId");

                    b.ToTable("MediaContentStreamingService");
                });

            modelBuilder.Entity("Project.Models.AudioOption", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.ToTable("AudioOptions");
                });

            modelBuilder.Entity("Project.Models.MediaContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterImageName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("YoutubeTrailerURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("MediaContents");

                    b.HasDiscriminator().HasValue("MediaContent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Project.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId", "MediaId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Project.Models.StreamingService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("StreamingServices");
                });

            modelBuilder.Entity("Project.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("StreamingServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StreamingServiceId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Project.Models.SubscriptionConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndTime")
                        .HasColumnType("date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateOnly>("StartTime")
                        .HasColumnType("date");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("SubscriptionConfirmations");
                });

            modelBuilder.Entity("Project.Models.SubtitleOption", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.ToTable("SubtitleOptions");
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Nickname")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.Models.WatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeLeftOf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("WatchDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("WatchHistories");
                });

            modelBuilder.Entity("Project.Models.Documentary", b =>
                {
                    b.HasBaseType("Project.Models.MediaContent");

                    b.Property<string>("Topics")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Documentary");
                });

            modelBuilder.Entity("Project.Models.Movie", b =>
                {
                    b.HasBaseType("Project.Models.MediaContent");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("MediaContentStreamingService", b =>
                {
                    b.HasOne("Project.Models.MediaContent", null)
                        .WithMany()
                        .HasForeignKey("MediaContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.StreamingService", null)
                        .WithMany()
                        .HasForeignKey("StreamingServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.AudioOption", b =>
                {
                    b.HasOne("Project.Models.MediaContent", "MediaContent")
                        .WithOne("AudioOption")
                        .HasForeignKey("Project.Models.AudioOption", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("Project.Models.Review", b =>
                {
                    b.HasOne("Project.Models.MediaContent", "MediaContent")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.WatchHistory", "WatchHistory")
                        .WithMany()
                        .HasForeignKey("UserId", "MediaId")
                        .HasPrincipalKey("UserId", "MediaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaContent");

                    b.Navigation("User");

                    b.Navigation("WatchHistory");
                });

            modelBuilder.Entity("Project.Models.Subscription", b =>
                {
                    b.HasOne("Project.Models.StreamingService", "StreamingService")
                        .WithMany("Subscriptions")
                        .HasForeignKey("StreamingServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreamingService");
                });

            modelBuilder.Entity("Project.Models.SubscriptionConfirmation", b =>
                {
                    b.HasOne("Project.Models.Subscription", "Subscription")
                        .WithMany("Confirmations")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.User", "User")
                        .WithMany("Confirmations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Models.SubtitleOption", b =>
                {
                    b.HasOne("Project.Models.MediaContent", "MediaContent")
                        .WithOne("SubtitleOption")
                        .HasForeignKey("Project.Models.SubtitleOption", "MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");
                });

            modelBuilder.Entity("Project.Models.WatchHistory", b =>
                {
                    b.HasOne("Project.Models.MediaContent", "MediaContent")
                        .WithMany("WatchHistories")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.User", "User")
                        .WithMany("WatchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Models.MediaContent", b =>
                {
                    b.Navigation("AudioOption");

                    b.Navigation("Reviews");

                    b.Navigation("SubtitleOption");

                    b.Navigation("WatchHistories");
                });

            modelBuilder.Entity("Project.Models.StreamingService", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Project.Models.Subscription", b =>
                {
                    b.Navigation("Confirmations");
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.Navigation("Confirmations");

                    b.Navigation("Reviews");

                    b.Navigation("WatchHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
